#lang racket

#|
Each new term in the Fibonacci sequence is generated by 
adding the previous two terms. By starting with 1 and 
2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence 
whose values do not exceed four million, find the sum 
of the even-valued terms.
|#

#|
This is not a particularly satisfying solution for racket as we 
use normal loops as oppossed to recursion
|#

(define (sum-fib n)
  ; Loop with variables a b and acc
  (let loop ((a 0) (b 1) (acc 0))

  	; If a > n
    (if (> a n)

      ; Return the value of the accumulator
      acc

      ; Else, we will add a and b
      (loop b (+ a b)
        (if (even? a)
          (+ acc a)
          acc)))))

(sum-fib 4000000)